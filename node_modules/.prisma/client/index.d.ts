
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Study
 * 
 */
export type Study = $Result.DefaultSelection<Prisma.$StudyPayload>
/**
 * Model Emoji
 * 
 */
export type Emoji = $Result.DefaultSelection<Prisma.$EmojiPayload>
/**
 * Model Habit
 * 
 */
export type Habit = $Result.DefaultSelection<Prisma.$HabitPayload>
/**
 * Model HabitSuccessDate
 * 
 */
export type HabitSuccessDate = $Result.DefaultSelection<Prisma.$HabitSuccessDatePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Studies
 * const studies = await prisma.study.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Studies
   * const studies = await prisma.study.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.study`: Exposes CRUD operations for the **Study** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Studies
    * const studies = await prisma.study.findMany()
    * ```
    */
  get study(): Prisma.StudyDelegate<ExtArgs>;

  /**
   * `prisma.emoji`: Exposes CRUD operations for the **Emoji** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Emojis
    * const emojis = await prisma.emoji.findMany()
    * ```
    */
  get emoji(): Prisma.EmojiDelegate<ExtArgs>;

  /**
   * `prisma.habit`: Exposes CRUD operations for the **Habit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Habits
    * const habits = await prisma.habit.findMany()
    * ```
    */
  get habit(): Prisma.HabitDelegate<ExtArgs>;

  /**
   * `prisma.habitSuccessDate`: Exposes CRUD operations for the **HabitSuccessDate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HabitSuccessDates
    * const habitSuccessDates = await prisma.habitSuccessDate.findMany()
    * ```
    */
  get habitSuccessDate(): Prisma.HabitSuccessDateDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Study: 'Study',
    Emoji: 'Emoji',
    Habit: 'Habit',
    HabitSuccessDate: 'HabitSuccessDate'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "study" | "emoji" | "habit" | "habitSuccessDate"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Study: {
        payload: Prisma.$StudyPayload<ExtArgs>
        fields: Prisma.StudyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          findFirst: {
            args: Prisma.StudyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          findMany: {
            args: Prisma.StudyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>[]
          }
          create: {
            args: Prisma.StudyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          createMany: {
            args: Prisma.StudyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>[]
          }
          delete: {
            args: Prisma.StudyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          update: {
            args: Prisma.StudyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          deleteMany: {
            args: Prisma.StudyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.StudyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudyPayload>
          }
          aggregate: {
            args: Prisma.StudyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudy>
          }
          groupBy: {
            args: Prisma.StudyGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudyGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudyCountArgs<ExtArgs>
            result: $Utils.Optional<StudyCountAggregateOutputType> | number
          }
        }
      }
      Emoji: {
        payload: Prisma.$EmojiPayload<ExtArgs>
        fields: Prisma.EmojiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmojiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmojiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>
          }
          findFirst: {
            args: Prisma.EmojiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmojiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>
          }
          findMany: {
            args: Prisma.EmojiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>[]
          }
          create: {
            args: Prisma.EmojiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>
          }
          createMany: {
            args: Prisma.EmojiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmojiCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>[]
          }
          delete: {
            args: Prisma.EmojiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>
          }
          update: {
            args: Prisma.EmojiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>
          }
          deleteMany: {
            args: Prisma.EmojiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmojiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmojiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmojiPayload>
          }
          aggregate: {
            args: Prisma.EmojiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmoji>
          }
          groupBy: {
            args: Prisma.EmojiGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmojiGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmojiCountArgs<ExtArgs>
            result: $Utils.Optional<EmojiCountAggregateOutputType> | number
          }
        }
      }
      Habit: {
        payload: Prisma.$HabitPayload<ExtArgs>
        fields: Prisma.HabitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HabitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HabitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          findFirst: {
            args: Prisma.HabitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HabitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          findMany: {
            args: Prisma.HabitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>[]
          }
          create: {
            args: Prisma.HabitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          createMany: {
            args: Prisma.HabitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HabitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>[]
          }
          delete: {
            args: Prisma.HabitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          update: {
            args: Prisma.HabitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          deleteMany: {
            args: Prisma.HabitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HabitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HabitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitPayload>
          }
          aggregate: {
            args: Prisma.HabitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHabit>
          }
          groupBy: {
            args: Prisma.HabitGroupByArgs<ExtArgs>
            result: $Utils.Optional<HabitGroupByOutputType>[]
          }
          count: {
            args: Prisma.HabitCountArgs<ExtArgs>
            result: $Utils.Optional<HabitCountAggregateOutputType> | number
          }
        }
      }
      HabitSuccessDate: {
        payload: Prisma.$HabitSuccessDatePayload<ExtArgs>
        fields: Prisma.HabitSuccessDateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HabitSuccessDateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HabitSuccessDateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>
          }
          findFirst: {
            args: Prisma.HabitSuccessDateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HabitSuccessDateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>
          }
          findMany: {
            args: Prisma.HabitSuccessDateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>[]
          }
          create: {
            args: Prisma.HabitSuccessDateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>
          }
          createMany: {
            args: Prisma.HabitSuccessDateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HabitSuccessDateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>[]
          }
          delete: {
            args: Prisma.HabitSuccessDateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>
          }
          update: {
            args: Prisma.HabitSuccessDateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>
          }
          deleteMany: {
            args: Prisma.HabitSuccessDateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HabitSuccessDateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.HabitSuccessDateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HabitSuccessDatePayload>
          }
          aggregate: {
            args: Prisma.HabitSuccessDateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHabitSuccessDate>
          }
          groupBy: {
            args: Prisma.HabitSuccessDateGroupByArgs<ExtArgs>
            result: $Utils.Optional<HabitSuccessDateGroupByOutputType>[]
          }
          count: {
            args: Prisma.HabitSuccessDateCountArgs<ExtArgs>
            result: $Utils.Optional<HabitSuccessDateCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudyCountOutputType
   */

  export type StudyCountOutputType = {
    Emojis: number
    Habits: number
  }

  export type StudyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Emojis?: boolean | StudyCountOutputTypeCountEmojisArgs
    Habits?: boolean | StudyCountOutputTypeCountHabitsArgs
  }

  // Custom InputTypes
  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudyCountOutputType
     */
    select?: StudyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeCountEmojisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmojiWhereInput
  }

  /**
   * StudyCountOutputType without action
   */
  export type StudyCountOutputTypeCountHabitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitWhereInput
  }


  /**
   * Count Type HabitCountOutputType
   */

  export type HabitCountOutputType = {
    HabitSuccessDates: number
  }

  export type HabitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    HabitSuccessDates?: boolean | HabitCountOutputTypeCountHabitSuccessDatesArgs
  }

  // Custom InputTypes
  /**
   * HabitCountOutputType without action
   */
  export type HabitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitCountOutputType
     */
    select?: HabitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HabitCountOutputType without action
   */
  export type HabitCountOutputTypeCountHabitSuccessDatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitSuccessDateWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Study
   */

  export type AggregateStudy = {
    _count: StudyCountAggregateOutputType | null
    _avg: StudyAvgAggregateOutputType | null
    _sum: StudySumAggregateOutputType | null
    _min: StudyMinAggregateOutputType | null
    _max: StudyMaxAggregateOutputType | null
  }

  export type StudyAvgAggregateOutputType = {
    point: number | null
  }

  export type StudySumAggregateOutputType = {
    point: number | null
  }

  export type StudyMinAggregateOutputType = {
    id: string | null
    nickname: string | null
    studyName: string | null
    description: string | null
    background: string | null
    password: string | null
    point: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudyMaxAggregateOutputType = {
    id: string | null
    nickname: string | null
    studyName: string | null
    description: string | null
    background: string | null
    password: string | null
    point: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type StudyCountAggregateOutputType = {
    id: number
    nickname: number
    studyName: number
    description: number
    background: number
    password: number
    point: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type StudyAvgAggregateInputType = {
    point?: true
  }

  export type StudySumAggregateInputType = {
    point?: true
  }

  export type StudyMinAggregateInputType = {
    id?: true
    nickname?: true
    studyName?: true
    description?: true
    background?: true
    password?: true
    point?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudyMaxAggregateInputType = {
    id?: true
    nickname?: true
    studyName?: true
    description?: true
    background?: true
    password?: true
    point?: true
    createdAt?: true
    updatedAt?: true
  }

  export type StudyCountAggregateInputType = {
    id?: true
    nickname?: true
    studyName?: true
    description?: true
    background?: true
    password?: true
    point?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type StudyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Study to aggregate.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Studies
    **/
    _count?: true | StudyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudyMaxAggregateInputType
  }

  export type GetStudyAggregateType<T extends StudyAggregateArgs> = {
        [P in keyof T & keyof AggregateStudy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudy[P]>
      : GetScalarType<T[P], AggregateStudy[P]>
  }




  export type StudyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudyWhereInput
    orderBy?: StudyOrderByWithAggregationInput | StudyOrderByWithAggregationInput[]
    by: StudyScalarFieldEnum[] | StudyScalarFieldEnum
    having?: StudyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudyCountAggregateInputType | true
    _avg?: StudyAvgAggregateInputType
    _sum?: StudySumAggregateInputType
    _min?: StudyMinAggregateInputType
    _max?: StudyMaxAggregateInputType
  }

  export type StudyGroupByOutputType = {
    id: string
    nickname: string
    studyName: string
    description: string
    background: string
    password: string
    point: number
    createdAt: Date
    updatedAt: Date
    _count: StudyCountAggregateOutputType | null
    _avg: StudyAvgAggregateOutputType | null
    _sum: StudySumAggregateOutputType | null
    _min: StudyMinAggregateOutputType | null
    _max: StudyMaxAggregateOutputType | null
  }

  type GetStudyGroupByPayload<T extends StudyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudyGroupByOutputType[P]>
            : GetScalarType<T[P], StudyGroupByOutputType[P]>
        }
      >
    >


  export type StudySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nickname?: boolean
    studyName?: boolean
    description?: boolean
    background?: boolean
    password?: boolean
    point?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Emojis?: boolean | Study$EmojisArgs<ExtArgs>
    Habits?: boolean | Study$HabitsArgs<ExtArgs>
    _count?: boolean | StudyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["study"]>

  export type StudySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nickname?: boolean
    studyName?: boolean
    description?: boolean
    background?: boolean
    password?: boolean
    point?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["study"]>

  export type StudySelectScalar = {
    id?: boolean
    nickname?: boolean
    studyName?: boolean
    description?: boolean
    background?: boolean
    password?: boolean
    point?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type StudyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Emojis?: boolean | Study$EmojisArgs<ExtArgs>
    Habits?: boolean | Study$HabitsArgs<ExtArgs>
    _count?: boolean | StudyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StudyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Study"
    objects: {
      Emojis: Prisma.$EmojiPayload<ExtArgs>[]
      Habits: Prisma.$HabitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nickname: string
      studyName: string
      description: string
      background: string
      password: string
      point: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["study"]>
    composites: {}
  }

  type StudyGetPayload<S extends boolean | null | undefined | StudyDefaultArgs> = $Result.GetResult<Prisma.$StudyPayload, S>

  type StudyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudyCountAggregateInputType | true
    }

  export interface StudyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Study'], meta: { name: 'Study' } }
    /**
     * Find zero or one Study that matches the filter.
     * @param {StudyFindUniqueArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudyFindUniqueArgs>(args: SelectSubset<T, StudyFindUniqueArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Study that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudyFindUniqueOrThrowArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudyFindUniqueOrThrowArgs>(args: SelectSubset<T, StudyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Study that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindFirstArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudyFindFirstArgs>(args?: SelectSubset<T, StudyFindFirstArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Study that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindFirstOrThrowArgs} args - Arguments to find a Study
     * @example
     * // Get one Study
     * const study = await prisma.study.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudyFindFirstOrThrowArgs>(args?: SelectSubset<T, StudyFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Studies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Studies
     * const studies = await prisma.study.findMany()
     * 
     * // Get first 10 Studies
     * const studies = await prisma.study.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studyWithIdOnly = await prisma.study.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudyFindManyArgs>(args?: SelectSubset<T, StudyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Study.
     * @param {StudyCreateArgs} args - Arguments to create a Study.
     * @example
     * // Create one Study
     * const Study = await prisma.study.create({
     *   data: {
     *     // ... data to create a Study
     *   }
     * })
     * 
     */
    create<T extends StudyCreateArgs>(args: SelectSubset<T, StudyCreateArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Studies.
     * @param {StudyCreateManyArgs} args - Arguments to create many Studies.
     * @example
     * // Create many Studies
     * const study = await prisma.study.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudyCreateManyArgs>(args?: SelectSubset<T, StudyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Studies and returns the data saved in the database.
     * @param {StudyCreateManyAndReturnArgs} args - Arguments to create many Studies.
     * @example
     * // Create many Studies
     * const study = await prisma.study.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Studies and only return the `id`
     * const studyWithIdOnly = await prisma.study.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudyCreateManyAndReturnArgs>(args?: SelectSubset<T, StudyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Study.
     * @param {StudyDeleteArgs} args - Arguments to delete one Study.
     * @example
     * // Delete one Study
     * const Study = await prisma.study.delete({
     *   where: {
     *     // ... filter to delete one Study
     *   }
     * })
     * 
     */
    delete<T extends StudyDeleteArgs>(args: SelectSubset<T, StudyDeleteArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Study.
     * @param {StudyUpdateArgs} args - Arguments to update one Study.
     * @example
     * // Update one Study
     * const study = await prisma.study.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudyUpdateArgs>(args: SelectSubset<T, StudyUpdateArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Studies.
     * @param {StudyDeleteManyArgs} args - Arguments to filter Studies to delete.
     * @example
     * // Delete a few Studies
     * const { count } = await prisma.study.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudyDeleteManyArgs>(args?: SelectSubset<T, StudyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Studies
     * const study = await prisma.study.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudyUpdateManyArgs>(args: SelectSubset<T, StudyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Study.
     * @param {StudyUpsertArgs} args - Arguments to update or create a Study.
     * @example
     * // Update or create a Study
     * const study = await prisma.study.upsert({
     *   create: {
     *     // ... data to create a Study
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Study we want to update
     *   }
     * })
     */
    upsert<T extends StudyUpsertArgs>(args: SelectSubset<T, StudyUpsertArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Studies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyCountArgs} args - Arguments to filter Studies to count.
     * @example
     * // Count the number of Studies
     * const count = await prisma.study.count({
     *   where: {
     *     // ... the filter for the Studies we want to count
     *   }
     * })
    **/
    count<T extends StudyCountArgs>(
      args?: Subset<T, StudyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudyAggregateArgs>(args: Subset<T, StudyAggregateArgs>): Prisma.PrismaPromise<GetStudyAggregateType<T>>

    /**
     * Group by Study.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudyGroupByArgs['orderBy'] }
        : { orderBy?: StudyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Study model
   */
  readonly fields: StudyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Study.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Emojis<T extends Study$EmojisArgs<ExtArgs> = {}>(args?: Subset<T, Study$EmojisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "findMany"> | Null>
    Habits<T extends Study$HabitsArgs<ExtArgs> = {}>(args?: Subset<T, Study$HabitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Study model
   */ 
  interface StudyFieldRefs {
    readonly id: FieldRef<"Study", 'String'>
    readonly nickname: FieldRef<"Study", 'String'>
    readonly studyName: FieldRef<"Study", 'String'>
    readonly description: FieldRef<"Study", 'String'>
    readonly background: FieldRef<"Study", 'String'>
    readonly password: FieldRef<"Study", 'String'>
    readonly point: FieldRef<"Study", 'Int'>
    readonly createdAt: FieldRef<"Study", 'DateTime'>
    readonly updatedAt: FieldRef<"Study", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Study findUnique
   */
  export type StudyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study findUniqueOrThrow
   */
  export type StudyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study findFirst
   */
  export type StudyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studies.
     */
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * Study findFirstOrThrow
   */
  export type StudyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Study to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Studies.
     */
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * Study findMany
   */
  export type StudyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter, which Studies to fetch.
     */
    where?: StudyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Studies to fetch.
     */
    orderBy?: StudyOrderByWithRelationInput | StudyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Studies.
     */
    cursor?: StudyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Studies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Studies.
     */
    skip?: number
    distinct?: StudyScalarFieldEnum | StudyScalarFieldEnum[]
  }

  /**
   * Study create
   */
  export type StudyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The data needed to create a Study.
     */
    data: XOR<StudyCreateInput, StudyUncheckedCreateInput>
  }

  /**
   * Study createMany
   */
  export type StudyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Studies.
     */
    data: StudyCreateManyInput | StudyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Study createManyAndReturn
   */
  export type StudyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Studies.
     */
    data: StudyCreateManyInput | StudyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Study update
   */
  export type StudyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The data needed to update a Study.
     */
    data: XOR<StudyUpdateInput, StudyUncheckedUpdateInput>
    /**
     * Choose, which Study to update.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study updateMany
   */
  export type StudyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Studies.
     */
    data: XOR<StudyUpdateManyMutationInput, StudyUncheckedUpdateManyInput>
    /**
     * Filter which Studies to update
     */
    where?: StudyWhereInput
  }

  /**
   * Study upsert
   */
  export type StudyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * The filter to search for the Study to update in case it exists.
     */
    where: StudyWhereUniqueInput
    /**
     * In case the Study found by the `where` argument doesn't exist, create a new Study with this data.
     */
    create: XOR<StudyCreateInput, StudyUncheckedCreateInput>
    /**
     * In case the Study was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudyUpdateInput, StudyUncheckedUpdateInput>
  }

  /**
   * Study delete
   */
  export type StudyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
    /**
     * Filter which Study to delete.
     */
    where: StudyWhereUniqueInput
  }

  /**
   * Study deleteMany
   */
  export type StudyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Studies to delete
     */
    where?: StudyWhereInput
  }

  /**
   * Study.Emojis
   */
  export type Study$EmojisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    where?: EmojiWhereInput
    orderBy?: EmojiOrderByWithRelationInput | EmojiOrderByWithRelationInput[]
    cursor?: EmojiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmojiScalarFieldEnum | EmojiScalarFieldEnum[]
  }

  /**
   * Study.Habits
   */
  export type Study$HabitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    where?: HabitWhereInput
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    cursor?: HabitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Study without action
   */
  export type StudyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Study
     */
    select?: StudySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudyInclude<ExtArgs> | null
  }


  /**
   * Model Emoji
   */

  export type AggregateEmoji = {
    _count: EmojiCountAggregateOutputType | null
    _avg: EmojiAvgAggregateOutputType | null
    _sum: EmojiSumAggregateOutputType | null
    _min: EmojiMinAggregateOutputType | null
    _max: EmojiMaxAggregateOutputType | null
  }

  export type EmojiAvgAggregateOutputType = {
    emoNum: number | null
    count: number | null
  }

  export type EmojiSumAggregateOutputType = {
    emoNum: number | null
    count: number | null
  }

  export type EmojiMinAggregateOutputType = {
    id: string | null
    studyId: string | null
    emoNum: number | null
    count: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmojiMaxAggregateOutputType = {
    id: string | null
    studyId: string | null
    emoNum: number | null
    count: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmojiCountAggregateOutputType = {
    id: number
    studyId: number
    emoNum: number
    count: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmojiAvgAggregateInputType = {
    emoNum?: true
    count?: true
  }

  export type EmojiSumAggregateInputType = {
    emoNum?: true
    count?: true
  }

  export type EmojiMinAggregateInputType = {
    id?: true
    studyId?: true
    emoNum?: true
    count?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmojiMaxAggregateInputType = {
    id?: true
    studyId?: true
    emoNum?: true
    count?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmojiCountAggregateInputType = {
    id?: true
    studyId?: true
    emoNum?: true
    count?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmojiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emoji to aggregate.
     */
    where?: EmojiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emojis to fetch.
     */
    orderBy?: EmojiOrderByWithRelationInput | EmojiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmojiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emojis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emojis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Emojis
    **/
    _count?: true | EmojiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmojiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmojiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmojiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmojiMaxAggregateInputType
  }

  export type GetEmojiAggregateType<T extends EmojiAggregateArgs> = {
        [P in keyof T & keyof AggregateEmoji]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmoji[P]>
      : GetScalarType<T[P], AggregateEmoji[P]>
  }




  export type EmojiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmojiWhereInput
    orderBy?: EmojiOrderByWithAggregationInput | EmojiOrderByWithAggregationInput[]
    by: EmojiScalarFieldEnum[] | EmojiScalarFieldEnum
    having?: EmojiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmojiCountAggregateInputType | true
    _avg?: EmojiAvgAggregateInputType
    _sum?: EmojiSumAggregateInputType
    _min?: EmojiMinAggregateInputType
    _max?: EmojiMaxAggregateInputType
  }

  export type EmojiGroupByOutputType = {
    id: string
    studyId: string
    emoNum: number
    count: number
    createdAt: Date
    updatedAt: Date
    _count: EmojiCountAggregateOutputType | null
    _avg: EmojiAvgAggregateOutputType | null
    _sum: EmojiSumAggregateOutputType | null
    _min: EmojiMinAggregateOutputType | null
    _max: EmojiMaxAggregateOutputType | null
  }

  type GetEmojiGroupByPayload<T extends EmojiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmojiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmojiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmojiGroupByOutputType[P]>
            : GetScalarType<T[P], EmojiGroupByOutputType[P]>
        }
      >
    >


  export type EmojiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    emoNum?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emoji"]>

  export type EmojiSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    emoNum?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emoji"]>

  export type EmojiSelectScalar = {
    id?: boolean
    studyId?: boolean
    emoNum?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmojiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Study?: boolean | StudyDefaultArgs<ExtArgs>
  }
  export type EmojiIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Study?: boolean | StudyDefaultArgs<ExtArgs>
  }

  export type $EmojiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Emoji"
    objects: {
      Study: Prisma.$StudyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studyId: string
      emoNum: number
      count: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emoji"]>
    composites: {}
  }

  type EmojiGetPayload<S extends boolean | null | undefined | EmojiDefaultArgs> = $Result.GetResult<Prisma.$EmojiPayload, S>

  type EmojiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmojiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmojiCountAggregateInputType | true
    }

  export interface EmojiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Emoji'], meta: { name: 'Emoji' } }
    /**
     * Find zero or one Emoji that matches the filter.
     * @param {EmojiFindUniqueArgs} args - Arguments to find a Emoji
     * @example
     * // Get one Emoji
     * const emoji = await prisma.emoji.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmojiFindUniqueArgs>(args: SelectSubset<T, EmojiFindUniqueArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Emoji that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmojiFindUniqueOrThrowArgs} args - Arguments to find a Emoji
     * @example
     * // Get one Emoji
     * const emoji = await prisma.emoji.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmojiFindUniqueOrThrowArgs>(args: SelectSubset<T, EmojiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Emoji that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmojiFindFirstArgs} args - Arguments to find a Emoji
     * @example
     * // Get one Emoji
     * const emoji = await prisma.emoji.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmojiFindFirstArgs>(args?: SelectSubset<T, EmojiFindFirstArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Emoji that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmojiFindFirstOrThrowArgs} args - Arguments to find a Emoji
     * @example
     * // Get one Emoji
     * const emoji = await prisma.emoji.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmojiFindFirstOrThrowArgs>(args?: SelectSubset<T, EmojiFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Emojis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmojiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Emojis
     * const emojis = await prisma.emoji.findMany()
     * 
     * // Get first 10 Emojis
     * const emojis = await prisma.emoji.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emojiWithIdOnly = await prisma.emoji.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmojiFindManyArgs>(args?: SelectSubset<T, EmojiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Emoji.
     * @param {EmojiCreateArgs} args - Arguments to create a Emoji.
     * @example
     * // Create one Emoji
     * const Emoji = await prisma.emoji.create({
     *   data: {
     *     // ... data to create a Emoji
     *   }
     * })
     * 
     */
    create<T extends EmojiCreateArgs>(args: SelectSubset<T, EmojiCreateArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Emojis.
     * @param {EmojiCreateManyArgs} args - Arguments to create many Emojis.
     * @example
     * // Create many Emojis
     * const emoji = await prisma.emoji.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmojiCreateManyArgs>(args?: SelectSubset<T, EmojiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Emojis and returns the data saved in the database.
     * @param {EmojiCreateManyAndReturnArgs} args - Arguments to create many Emojis.
     * @example
     * // Create many Emojis
     * const emoji = await prisma.emoji.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Emojis and only return the `id`
     * const emojiWithIdOnly = await prisma.emoji.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmojiCreateManyAndReturnArgs>(args?: SelectSubset<T, EmojiCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Emoji.
     * @param {EmojiDeleteArgs} args - Arguments to delete one Emoji.
     * @example
     * // Delete one Emoji
     * const Emoji = await prisma.emoji.delete({
     *   where: {
     *     // ... filter to delete one Emoji
     *   }
     * })
     * 
     */
    delete<T extends EmojiDeleteArgs>(args: SelectSubset<T, EmojiDeleteArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Emoji.
     * @param {EmojiUpdateArgs} args - Arguments to update one Emoji.
     * @example
     * // Update one Emoji
     * const emoji = await prisma.emoji.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmojiUpdateArgs>(args: SelectSubset<T, EmojiUpdateArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Emojis.
     * @param {EmojiDeleteManyArgs} args - Arguments to filter Emojis to delete.
     * @example
     * // Delete a few Emojis
     * const { count } = await prisma.emoji.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmojiDeleteManyArgs>(args?: SelectSubset<T, EmojiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emojis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmojiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Emojis
     * const emoji = await prisma.emoji.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmojiUpdateManyArgs>(args: SelectSubset<T, EmojiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Emoji.
     * @param {EmojiUpsertArgs} args - Arguments to update or create a Emoji.
     * @example
     * // Update or create a Emoji
     * const emoji = await prisma.emoji.upsert({
     *   create: {
     *     // ... data to create a Emoji
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Emoji we want to update
     *   }
     * })
     */
    upsert<T extends EmojiUpsertArgs>(args: SelectSubset<T, EmojiUpsertArgs<ExtArgs>>): Prisma__EmojiClient<$Result.GetResult<Prisma.$EmojiPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Emojis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmojiCountArgs} args - Arguments to filter Emojis to count.
     * @example
     * // Count the number of Emojis
     * const count = await prisma.emoji.count({
     *   where: {
     *     // ... the filter for the Emojis we want to count
     *   }
     * })
    **/
    count<T extends EmojiCountArgs>(
      args?: Subset<T, EmojiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmojiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Emoji.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmojiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmojiAggregateArgs>(args: Subset<T, EmojiAggregateArgs>): Prisma.PrismaPromise<GetEmojiAggregateType<T>>

    /**
     * Group by Emoji.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmojiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmojiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmojiGroupByArgs['orderBy'] }
        : { orderBy?: EmojiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmojiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmojiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Emoji model
   */
  readonly fields: EmojiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Emoji.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmojiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Study<T extends StudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyDefaultArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Emoji model
   */ 
  interface EmojiFieldRefs {
    readonly id: FieldRef<"Emoji", 'String'>
    readonly studyId: FieldRef<"Emoji", 'String'>
    readonly emoNum: FieldRef<"Emoji", 'Int'>
    readonly count: FieldRef<"Emoji", 'Int'>
    readonly createdAt: FieldRef<"Emoji", 'DateTime'>
    readonly updatedAt: FieldRef<"Emoji", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Emoji findUnique
   */
  export type EmojiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * Filter, which Emoji to fetch.
     */
    where: EmojiWhereUniqueInput
  }

  /**
   * Emoji findUniqueOrThrow
   */
  export type EmojiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * Filter, which Emoji to fetch.
     */
    where: EmojiWhereUniqueInput
  }

  /**
   * Emoji findFirst
   */
  export type EmojiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * Filter, which Emoji to fetch.
     */
    where?: EmojiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emojis to fetch.
     */
    orderBy?: EmojiOrderByWithRelationInput | EmojiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emojis.
     */
    cursor?: EmojiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emojis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emojis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emojis.
     */
    distinct?: EmojiScalarFieldEnum | EmojiScalarFieldEnum[]
  }

  /**
   * Emoji findFirstOrThrow
   */
  export type EmojiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * Filter, which Emoji to fetch.
     */
    where?: EmojiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emojis to fetch.
     */
    orderBy?: EmojiOrderByWithRelationInput | EmojiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emojis.
     */
    cursor?: EmojiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emojis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emojis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emojis.
     */
    distinct?: EmojiScalarFieldEnum | EmojiScalarFieldEnum[]
  }

  /**
   * Emoji findMany
   */
  export type EmojiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * Filter, which Emojis to fetch.
     */
    where?: EmojiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emojis to fetch.
     */
    orderBy?: EmojiOrderByWithRelationInput | EmojiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Emojis.
     */
    cursor?: EmojiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emojis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emojis.
     */
    skip?: number
    distinct?: EmojiScalarFieldEnum | EmojiScalarFieldEnum[]
  }

  /**
   * Emoji create
   */
  export type EmojiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * The data needed to create a Emoji.
     */
    data: XOR<EmojiCreateInput, EmojiUncheckedCreateInput>
  }

  /**
   * Emoji createMany
   */
  export type EmojiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Emojis.
     */
    data: EmojiCreateManyInput | EmojiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Emoji createManyAndReturn
   */
  export type EmojiCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Emojis.
     */
    data: EmojiCreateManyInput | EmojiCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Emoji update
   */
  export type EmojiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * The data needed to update a Emoji.
     */
    data: XOR<EmojiUpdateInput, EmojiUncheckedUpdateInput>
    /**
     * Choose, which Emoji to update.
     */
    where: EmojiWhereUniqueInput
  }

  /**
   * Emoji updateMany
   */
  export type EmojiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Emojis.
     */
    data: XOR<EmojiUpdateManyMutationInput, EmojiUncheckedUpdateManyInput>
    /**
     * Filter which Emojis to update
     */
    where?: EmojiWhereInput
  }

  /**
   * Emoji upsert
   */
  export type EmojiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * The filter to search for the Emoji to update in case it exists.
     */
    where: EmojiWhereUniqueInput
    /**
     * In case the Emoji found by the `where` argument doesn't exist, create a new Emoji with this data.
     */
    create: XOR<EmojiCreateInput, EmojiUncheckedCreateInput>
    /**
     * In case the Emoji was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmojiUpdateInput, EmojiUncheckedUpdateInput>
  }

  /**
   * Emoji delete
   */
  export type EmojiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
    /**
     * Filter which Emoji to delete.
     */
    where: EmojiWhereUniqueInput
  }

  /**
   * Emoji deleteMany
   */
  export type EmojiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emojis to delete
     */
    where?: EmojiWhereInput
  }

  /**
   * Emoji without action
   */
  export type EmojiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Emoji
     */
    select?: EmojiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmojiInclude<ExtArgs> | null
  }


  /**
   * Model Habit
   */

  export type AggregateHabit = {
    _count: HabitCountAggregateOutputType | null
    _min: HabitMinAggregateOutputType | null
    _max: HabitMaxAggregateOutputType | null
  }

  export type HabitMinAggregateOutputType = {
    id: string | null
    studyId: string | null
    name: string | null
    deleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitMaxAggregateOutputType = {
    id: string | null
    studyId: string | null
    name: string | null
    deleted: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitCountAggregateOutputType = {
    id: number
    studyId: number
    name: number
    deleted: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HabitMinAggregateInputType = {
    id?: true
    studyId?: true
    name?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitMaxAggregateInputType = {
    id?: true
    studyId?: true
    name?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitCountAggregateInputType = {
    id?: true
    studyId?: true
    name?: true
    deleted?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HabitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habit to aggregate.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Habits
    **/
    _count?: true | HabitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabitMaxAggregateInputType
  }

  export type GetHabitAggregateType<T extends HabitAggregateArgs> = {
        [P in keyof T & keyof AggregateHabit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabit[P]>
      : GetScalarType<T[P], AggregateHabit[P]>
  }




  export type HabitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitWhereInput
    orderBy?: HabitOrderByWithAggregationInput | HabitOrderByWithAggregationInput[]
    by: HabitScalarFieldEnum[] | HabitScalarFieldEnum
    having?: HabitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabitCountAggregateInputType | true
    _min?: HabitMinAggregateInputType
    _max?: HabitMaxAggregateInputType
  }

  export type HabitGroupByOutputType = {
    id: string
    studyId: string
    name: string
    deleted: boolean
    createdAt: Date
    updatedAt: Date
    _count: HabitCountAggregateOutputType | null
    _min: HabitMinAggregateOutputType | null
    _max: HabitMaxAggregateOutputType | null
  }

  type GetHabitGroupByPayload<T extends HabitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HabitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabitGroupByOutputType[P]>
            : GetScalarType<T[P], HabitGroupByOutputType[P]>
        }
      >
    >


  export type HabitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    name?: boolean
    deleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Study?: boolean | StudyDefaultArgs<ExtArgs>
    HabitSuccessDates?: boolean | Habit$HabitSuccessDatesArgs<ExtArgs>
    _count?: boolean | HabitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habit"]>

  export type HabitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studyId?: boolean
    name?: boolean
    deleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Study?: boolean | StudyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habit"]>

  export type HabitSelectScalar = {
    id?: boolean
    studyId?: boolean
    name?: boolean
    deleted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HabitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Study?: boolean | StudyDefaultArgs<ExtArgs>
    HabitSuccessDates?: boolean | Habit$HabitSuccessDatesArgs<ExtArgs>
    _count?: boolean | HabitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HabitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Study?: boolean | StudyDefaultArgs<ExtArgs>
  }

  export type $HabitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Habit"
    objects: {
      Study: Prisma.$StudyPayload<ExtArgs>
      HabitSuccessDates: Prisma.$HabitSuccessDatePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studyId: string
      name: string
      deleted: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["habit"]>
    composites: {}
  }

  type HabitGetPayload<S extends boolean | null | undefined | HabitDefaultArgs> = $Result.GetResult<Prisma.$HabitPayload, S>

  type HabitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HabitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HabitCountAggregateInputType | true
    }

  export interface HabitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Habit'], meta: { name: 'Habit' } }
    /**
     * Find zero or one Habit that matches the filter.
     * @param {HabitFindUniqueArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HabitFindUniqueArgs>(args: SelectSubset<T, HabitFindUniqueArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Habit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HabitFindUniqueOrThrowArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HabitFindUniqueOrThrowArgs>(args: SelectSubset<T, HabitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Habit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindFirstArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HabitFindFirstArgs>(args?: SelectSubset<T, HabitFindFirstArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Habit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindFirstOrThrowArgs} args - Arguments to find a Habit
     * @example
     * // Get one Habit
     * const habit = await prisma.habit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HabitFindFirstOrThrowArgs>(args?: SelectSubset<T, HabitFindFirstOrThrowArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Habits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Habits
     * const habits = await prisma.habit.findMany()
     * 
     * // Get first 10 Habits
     * const habits = await prisma.habit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habitWithIdOnly = await prisma.habit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HabitFindManyArgs>(args?: SelectSubset<T, HabitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Habit.
     * @param {HabitCreateArgs} args - Arguments to create a Habit.
     * @example
     * // Create one Habit
     * const Habit = await prisma.habit.create({
     *   data: {
     *     // ... data to create a Habit
     *   }
     * })
     * 
     */
    create<T extends HabitCreateArgs>(args: SelectSubset<T, HabitCreateArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Habits.
     * @param {HabitCreateManyArgs} args - Arguments to create many Habits.
     * @example
     * // Create many Habits
     * const habit = await prisma.habit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HabitCreateManyArgs>(args?: SelectSubset<T, HabitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Habits and returns the data saved in the database.
     * @param {HabitCreateManyAndReturnArgs} args - Arguments to create many Habits.
     * @example
     * // Create many Habits
     * const habit = await prisma.habit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Habits and only return the `id`
     * const habitWithIdOnly = await prisma.habit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HabitCreateManyAndReturnArgs>(args?: SelectSubset<T, HabitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Habit.
     * @param {HabitDeleteArgs} args - Arguments to delete one Habit.
     * @example
     * // Delete one Habit
     * const Habit = await prisma.habit.delete({
     *   where: {
     *     // ... filter to delete one Habit
     *   }
     * })
     * 
     */
    delete<T extends HabitDeleteArgs>(args: SelectSubset<T, HabitDeleteArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Habit.
     * @param {HabitUpdateArgs} args - Arguments to update one Habit.
     * @example
     * // Update one Habit
     * const habit = await prisma.habit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HabitUpdateArgs>(args: SelectSubset<T, HabitUpdateArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Habits.
     * @param {HabitDeleteManyArgs} args - Arguments to filter Habits to delete.
     * @example
     * // Delete a few Habits
     * const { count } = await prisma.habit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HabitDeleteManyArgs>(args?: SelectSubset<T, HabitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Habits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Habits
     * const habit = await prisma.habit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HabitUpdateManyArgs>(args: SelectSubset<T, HabitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Habit.
     * @param {HabitUpsertArgs} args - Arguments to update or create a Habit.
     * @example
     * // Update or create a Habit
     * const habit = await prisma.habit.upsert({
     *   create: {
     *     // ... data to create a Habit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Habit we want to update
     *   }
     * })
     */
    upsert<T extends HabitUpsertArgs>(args: SelectSubset<T, HabitUpsertArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Habits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitCountArgs} args - Arguments to filter Habits to count.
     * @example
     * // Count the number of Habits
     * const count = await prisma.habit.count({
     *   where: {
     *     // ... the filter for the Habits we want to count
     *   }
     * })
    **/
    count<T extends HabitCountArgs>(
      args?: Subset<T, HabitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Habit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabitAggregateArgs>(args: Subset<T, HabitAggregateArgs>): Prisma.PrismaPromise<GetHabitAggregateType<T>>

    /**
     * Group by Habit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HabitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HabitGroupByArgs['orderBy'] }
        : { orderBy?: HabitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HabitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Habit model
   */
  readonly fields: HabitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Habit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HabitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Study<T extends StudyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudyDefaultArgs<ExtArgs>>): Prisma__StudyClient<$Result.GetResult<Prisma.$StudyPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    HabitSuccessDates<T extends Habit$HabitSuccessDatesArgs<ExtArgs> = {}>(args?: Subset<T, Habit$HabitSuccessDatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Habit model
   */ 
  interface HabitFieldRefs {
    readonly id: FieldRef<"Habit", 'String'>
    readonly studyId: FieldRef<"Habit", 'String'>
    readonly name: FieldRef<"Habit", 'String'>
    readonly deleted: FieldRef<"Habit", 'Boolean'>
    readonly createdAt: FieldRef<"Habit", 'DateTime'>
    readonly updatedAt: FieldRef<"Habit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Habit findUnique
   */
  export type HabitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit findUniqueOrThrow
   */
  export type HabitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit findFirst
   */
  export type HabitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habits.
     */
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit findFirstOrThrow
   */
  export type HabitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habit to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Habits.
     */
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit findMany
   */
  export type HabitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter, which Habits to fetch.
     */
    where?: HabitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Habits to fetch.
     */
    orderBy?: HabitOrderByWithRelationInput | HabitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Habits.
     */
    cursor?: HabitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Habits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Habits.
     */
    skip?: number
    distinct?: HabitScalarFieldEnum | HabitScalarFieldEnum[]
  }

  /**
   * Habit create
   */
  export type HabitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The data needed to create a Habit.
     */
    data: XOR<HabitCreateInput, HabitUncheckedCreateInput>
  }

  /**
   * Habit createMany
   */
  export type HabitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Habits.
     */
    data: HabitCreateManyInput | HabitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Habit createManyAndReturn
   */
  export type HabitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Habits.
     */
    data: HabitCreateManyInput | HabitCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Habit update
   */
  export type HabitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The data needed to update a Habit.
     */
    data: XOR<HabitUpdateInput, HabitUncheckedUpdateInput>
    /**
     * Choose, which Habit to update.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit updateMany
   */
  export type HabitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Habits.
     */
    data: XOR<HabitUpdateManyMutationInput, HabitUncheckedUpdateManyInput>
    /**
     * Filter which Habits to update
     */
    where?: HabitWhereInput
  }

  /**
   * Habit upsert
   */
  export type HabitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * The filter to search for the Habit to update in case it exists.
     */
    where: HabitWhereUniqueInput
    /**
     * In case the Habit found by the `where` argument doesn't exist, create a new Habit with this data.
     */
    create: XOR<HabitCreateInput, HabitUncheckedCreateInput>
    /**
     * In case the Habit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HabitUpdateInput, HabitUncheckedUpdateInput>
  }

  /**
   * Habit delete
   */
  export type HabitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
    /**
     * Filter which Habit to delete.
     */
    where: HabitWhereUniqueInput
  }

  /**
   * Habit deleteMany
   */
  export type HabitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Habits to delete
     */
    where?: HabitWhereInput
  }

  /**
   * Habit.HabitSuccessDates
   */
  export type Habit$HabitSuccessDatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    where?: HabitSuccessDateWhereInput
    orderBy?: HabitSuccessDateOrderByWithRelationInput | HabitSuccessDateOrderByWithRelationInput[]
    cursor?: HabitSuccessDateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HabitSuccessDateScalarFieldEnum | HabitSuccessDateScalarFieldEnum[]
  }

  /**
   * Habit without action
   */
  export type HabitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Habit
     */
    select?: HabitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitInclude<ExtArgs> | null
  }


  /**
   * Model HabitSuccessDate
   */

  export type AggregateHabitSuccessDate = {
    _count: HabitSuccessDateCountAggregateOutputType | null
    _min: HabitSuccessDateMinAggregateOutputType | null
    _max: HabitSuccessDateMaxAggregateOutputType | null
  }

  export type HabitSuccessDateMinAggregateOutputType = {
    id: string | null
    habitId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitSuccessDateMaxAggregateOutputType = {
    id: string | null
    habitId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HabitSuccessDateCountAggregateOutputType = {
    id: number
    habitId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HabitSuccessDateMinAggregateInputType = {
    id?: true
    habitId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitSuccessDateMaxAggregateInputType = {
    id?: true
    habitId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HabitSuccessDateCountAggregateInputType = {
    id?: true
    habitId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HabitSuccessDateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HabitSuccessDate to aggregate.
     */
    where?: HabitSuccessDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HabitSuccessDates to fetch.
     */
    orderBy?: HabitSuccessDateOrderByWithRelationInput | HabitSuccessDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HabitSuccessDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HabitSuccessDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HabitSuccessDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HabitSuccessDates
    **/
    _count?: true | HabitSuccessDateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HabitSuccessDateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HabitSuccessDateMaxAggregateInputType
  }

  export type GetHabitSuccessDateAggregateType<T extends HabitSuccessDateAggregateArgs> = {
        [P in keyof T & keyof AggregateHabitSuccessDate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHabitSuccessDate[P]>
      : GetScalarType<T[P], AggregateHabitSuccessDate[P]>
  }




  export type HabitSuccessDateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HabitSuccessDateWhereInput
    orderBy?: HabitSuccessDateOrderByWithAggregationInput | HabitSuccessDateOrderByWithAggregationInput[]
    by: HabitSuccessDateScalarFieldEnum[] | HabitSuccessDateScalarFieldEnum
    having?: HabitSuccessDateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HabitSuccessDateCountAggregateInputType | true
    _min?: HabitSuccessDateMinAggregateInputType
    _max?: HabitSuccessDateMaxAggregateInputType
  }

  export type HabitSuccessDateGroupByOutputType = {
    id: string
    habitId: string
    createdAt: Date
    updatedAt: Date
    _count: HabitSuccessDateCountAggregateOutputType | null
    _min: HabitSuccessDateMinAggregateOutputType | null
    _max: HabitSuccessDateMaxAggregateOutputType | null
  }

  type GetHabitSuccessDateGroupByPayload<T extends HabitSuccessDateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HabitSuccessDateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HabitSuccessDateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HabitSuccessDateGroupByOutputType[P]>
            : GetScalarType<T[P], HabitSuccessDateGroupByOutputType[P]>
        }
      >
    >


  export type HabitSuccessDateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    habitId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Habit?: boolean | HabitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habitSuccessDate"]>

  export type HabitSuccessDateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    habitId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    Habit?: boolean | HabitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["habitSuccessDate"]>

  export type HabitSuccessDateSelectScalar = {
    id?: boolean
    habitId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HabitSuccessDateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Habit?: boolean | HabitDefaultArgs<ExtArgs>
  }
  export type HabitSuccessDateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Habit?: boolean | HabitDefaultArgs<ExtArgs>
  }

  export type $HabitSuccessDatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HabitSuccessDate"
    objects: {
      Habit: Prisma.$HabitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      habitId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["habitSuccessDate"]>
    composites: {}
  }

  type HabitSuccessDateGetPayload<S extends boolean | null | undefined | HabitSuccessDateDefaultArgs> = $Result.GetResult<Prisma.$HabitSuccessDatePayload, S>

  type HabitSuccessDateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HabitSuccessDateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HabitSuccessDateCountAggregateInputType | true
    }

  export interface HabitSuccessDateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HabitSuccessDate'], meta: { name: 'HabitSuccessDate' } }
    /**
     * Find zero or one HabitSuccessDate that matches the filter.
     * @param {HabitSuccessDateFindUniqueArgs} args - Arguments to find a HabitSuccessDate
     * @example
     * // Get one HabitSuccessDate
     * const habitSuccessDate = await prisma.habitSuccessDate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HabitSuccessDateFindUniqueArgs>(args: SelectSubset<T, HabitSuccessDateFindUniqueArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one HabitSuccessDate that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {HabitSuccessDateFindUniqueOrThrowArgs} args - Arguments to find a HabitSuccessDate
     * @example
     * // Get one HabitSuccessDate
     * const habitSuccessDate = await prisma.habitSuccessDate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HabitSuccessDateFindUniqueOrThrowArgs>(args: SelectSubset<T, HabitSuccessDateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first HabitSuccessDate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitSuccessDateFindFirstArgs} args - Arguments to find a HabitSuccessDate
     * @example
     * // Get one HabitSuccessDate
     * const habitSuccessDate = await prisma.habitSuccessDate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HabitSuccessDateFindFirstArgs>(args?: SelectSubset<T, HabitSuccessDateFindFirstArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first HabitSuccessDate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitSuccessDateFindFirstOrThrowArgs} args - Arguments to find a HabitSuccessDate
     * @example
     * // Get one HabitSuccessDate
     * const habitSuccessDate = await prisma.habitSuccessDate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HabitSuccessDateFindFirstOrThrowArgs>(args?: SelectSubset<T, HabitSuccessDateFindFirstOrThrowArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more HabitSuccessDates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitSuccessDateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HabitSuccessDates
     * const habitSuccessDates = await prisma.habitSuccessDate.findMany()
     * 
     * // Get first 10 HabitSuccessDates
     * const habitSuccessDates = await prisma.habitSuccessDate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const habitSuccessDateWithIdOnly = await prisma.habitSuccessDate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HabitSuccessDateFindManyArgs>(args?: SelectSubset<T, HabitSuccessDateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a HabitSuccessDate.
     * @param {HabitSuccessDateCreateArgs} args - Arguments to create a HabitSuccessDate.
     * @example
     * // Create one HabitSuccessDate
     * const HabitSuccessDate = await prisma.habitSuccessDate.create({
     *   data: {
     *     // ... data to create a HabitSuccessDate
     *   }
     * })
     * 
     */
    create<T extends HabitSuccessDateCreateArgs>(args: SelectSubset<T, HabitSuccessDateCreateArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many HabitSuccessDates.
     * @param {HabitSuccessDateCreateManyArgs} args - Arguments to create many HabitSuccessDates.
     * @example
     * // Create many HabitSuccessDates
     * const habitSuccessDate = await prisma.habitSuccessDate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HabitSuccessDateCreateManyArgs>(args?: SelectSubset<T, HabitSuccessDateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HabitSuccessDates and returns the data saved in the database.
     * @param {HabitSuccessDateCreateManyAndReturnArgs} args - Arguments to create many HabitSuccessDates.
     * @example
     * // Create many HabitSuccessDates
     * const habitSuccessDate = await prisma.habitSuccessDate.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HabitSuccessDates and only return the `id`
     * const habitSuccessDateWithIdOnly = await prisma.habitSuccessDate.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HabitSuccessDateCreateManyAndReturnArgs>(args?: SelectSubset<T, HabitSuccessDateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a HabitSuccessDate.
     * @param {HabitSuccessDateDeleteArgs} args - Arguments to delete one HabitSuccessDate.
     * @example
     * // Delete one HabitSuccessDate
     * const HabitSuccessDate = await prisma.habitSuccessDate.delete({
     *   where: {
     *     // ... filter to delete one HabitSuccessDate
     *   }
     * })
     * 
     */
    delete<T extends HabitSuccessDateDeleteArgs>(args: SelectSubset<T, HabitSuccessDateDeleteArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one HabitSuccessDate.
     * @param {HabitSuccessDateUpdateArgs} args - Arguments to update one HabitSuccessDate.
     * @example
     * // Update one HabitSuccessDate
     * const habitSuccessDate = await prisma.habitSuccessDate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HabitSuccessDateUpdateArgs>(args: SelectSubset<T, HabitSuccessDateUpdateArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more HabitSuccessDates.
     * @param {HabitSuccessDateDeleteManyArgs} args - Arguments to filter HabitSuccessDates to delete.
     * @example
     * // Delete a few HabitSuccessDates
     * const { count } = await prisma.habitSuccessDate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HabitSuccessDateDeleteManyArgs>(args?: SelectSubset<T, HabitSuccessDateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HabitSuccessDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitSuccessDateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HabitSuccessDates
     * const habitSuccessDate = await prisma.habitSuccessDate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HabitSuccessDateUpdateManyArgs>(args: SelectSubset<T, HabitSuccessDateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one HabitSuccessDate.
     * @param {HabitSuccessDateUpsertArgs} args - Arguments to update or create a HabitSuccessDate.
     * @example
     * // Update or create a HabitSuccessDate
     * const habitSuccessDate = await prisma.habitSuccessDate.upsert({
     *   create: {
     *     // ... data to create a HabitSuccessDate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HabitSuccessDate we want to update
     *   }
     * })
     */
    upsert<T extends HabitSuccessDateUpsertArgs>(args: SelectSubset<T, HabitSuccessDateUpsertArgs<ExtArgs>>): Prisma__HabitSuccessDateClient<$Result.GetResult<Prisma.$HabitSuccessDatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of HabitSuccessDates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitSuccessDateCountArgs} args - Arguments to filter HabitSuccessDates to count.
     * @example
     * // Count the number of HabitSuccessDates
     * const count = await prisma.habitSuccessDate.count({
     *   where: {
     *     // ... the filter for the HabitSuccessDates we want to count
     *   }
     * })
    **/
    count<T extends HabitSuccessDateCountArgs>(
      args?: Subset<T, HabitSuccessDateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HabitSuccessDateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HabitSuccessDate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitSuccessDateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HabitSuccessDateAggregateArgs>(args: Subset<T, HabitSuccessDateAggregateArgs>): Prisma.PrismaPromise<GetHabitSuccessDateAggregateType<T>>

    /**
     * Group by HabitSuccessDate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HabitSuccessDateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HabitSuccessDateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HabitSuccessDateGroupByArgs['orderBy'] }
        : { orderBy?: HabitSuccessDateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HabitSuccessDateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHabitSuccessDateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HabitSuccessDate model
   */
  readonly fields: HabitSuccessDateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HabitSuccessDate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HabitSuccessDateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Habit<T extends HabitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HabitDefaultArgs<ExtArgs>>): Prisma__HabitClient<$Result.GetResult<Prisma.$HabitPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HabitSuccessDate model
   */ 
  interface HabitSuccessDateFieldRefs {
    readonly id: FieldRef<"HabitSuccessDate", 'String'>
    readonly habitId: FieldRef<"HabitSuccessDate", 'String'>
    readonly createdAt: FieldRef<"HabitSuccessDate", 'DateTime'>
    readonly updatedAt: FieldRef<"HabitSuccessDate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HabitSuccessDate findUnique
   */
  export type HabitSuccessDateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * Filter, which HabitSuccessDate to fetch.
     */
    where: HabitSuccessDateWhereUniqueInput
  }

  /**
   * HabitSuccessDate findUniqueOrThrow
   */
  export type HabitSuccessDateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * Filter, which HabitSuccessDate to fetch.
     */
    where: HabitSuccessDateWhereUniqueInput
  }

  /**
   * HabitSuccessDate findFirst
   */
  export type HabitSuccessDateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * Filter, which HabitSuccessDate to fetch.
     */
    where?: HabitSuccessDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HabitSuccessDates to fetch.
     */
    orderBy?: HabitSuccessDateOrderByWithRelationInput | HabitSuccessDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HabitSuccessDates.
     */
    cursor?: HabitSuccessDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HabitSuccessDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HabitSuccessDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HabitSuccessDates.
     */
    distinct?: HabitSuccessDateScalarFieldEnum | HabitSuccessDateScalarFieldEnum[]
  }

  /**
   * HabitSuccessDate findFirstOrThrow
   */
  export type HabitSuccessDateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * Filter, which HabitSuccessDate to fetch.
     */
    where?: HabitSuccessDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HabitSuccessDates to fetch.
     */
    orderBy?: HabitSuccessDateOrderByWithRelationInput | HabitSuccessDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HabitSuccessDates.
     */
    cursor?: HabitSuccessDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HabitSuccessDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HabitSuccessDates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HabitSuccessDates.
     */
    distinct?: HabitSuccessDateScalarFieldEnum | HabitSuccessDateScalarFieldEnum[]
  }

  /**
   * HabitSuccessDate findMany
   */
  export type HabitSuccessDateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * Filter, which HabitSuccessDates to fetch.
     */
    where?: HabitSuccessDateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HabitSuccessDates to fetch.
     */
    orderBy?: HabitSuccessDateOrderByWithRelationInput | HabitSuccessDateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HabitSuccessDates.
     */
    cursor?: HabitSuccessDateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HabitSuccessDates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HabitSuccessDates.
     */
    skip?: number
    distinct?: HabitSuccessDateScalarFieldEnum | HabitSuccessDateScalarFieldEnum[]
  }

  /**
   * HabitSuccessDate create
   */
  export type HabitSuccessDateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * The data needed to create a HabitSuccessDate.
     */
    data: XOR<HabitSuccessDateCreateInput, HabitSuccessDateUncheckedCreateInput>
  }

  /**
   * HabitSuccessDate createMany
   */
  export type HabitSuccessDateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HabitSuccessDates.
     */
    data: HabitSuccessDateCreateManyInput | HabitSuccessDateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HabitSuccessDate createManyAndReturn
   */
  export type HabitSuccessDateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many HabitSuccessDates.
     */
    data: HabitSuccessDateCreateManyInput | HabitSuccessDateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HabitSuccessDate update
   */
  export type HabitSuccessDateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * The data needed to update a HabitSuccessDate.
     */
    data: XOR<HabitSuccessDateUpdateInput, HabitSuccessDateUncheckedUpdateInput>
    /**
     * Choose, which HabitSuccessDate to update.
     */
    where: HabitSuccessDateWhereUniqueInput
  }

  /**
   * HabitSuccessDate updateMany
   */
  export type HabitSuccessDateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HabitSuccessDates.
     */
    data: XOR<HabitSuccessDateUpdateManyMutationInput, HabitSuccessDateUncheckedUpdateManyInput>
    /**
     * Filter which HabitSuccessDates to update
     */
    where?: HabitSuccessDateWhereInput
  }

  /**
   * HabitSuccessDate upsert
   */
  export type HabitSuccessDateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * The filter to search for the HabitSuccessDate to update in case it exists.
     */
    where: HabitSuccessDateWhereUniqueInput
    /**
     * In case the HabitSuccessDate found by the `where` argument doesn't exist, create a new HabitSuccessDate with this data.
     */
    create: XOR<HabitSuccessDateCreateInput, HabitSuccessDateUncheckedCreateInput>
    /**
     * In case the HabitSuccessDate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HabitSuccessDateUpdateInput, HabitSuccessDateUncheckedUpdateInput>
  }

  /**
   * HabitSuccessDate delete
   */
  export type HabitSuccessDateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
    /**
     * Filter which HabitSuccessDate to delete.
     */
    where: HabitSuccessDateWhereUniqueInput
  }

  /**
   * HabitSuccessDate deleteMany
   */
  export type HabitSuccessDateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HabitSuccessDates to delete
     */
    where?: HabitSuccessDateWhereInput
  }

  /**
   * HabitSuccessDate without action
   */
  export type HabitSuccessDateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HabitSuccessDate
     */
    select?: HabitSuccessDateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HabitSuccessDateInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StudyScalarFieldEnum: {
    id: 'id',
    nickname: 'nickname',
    studyName: 'studyName',
    description: 'description',
    background: 'background',
    password: 'password',
    point: 'point',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type StudyScalarFieldEnum = (typeof StudyScalarFieldEnum)[keyof typeof StudyScalarFieldEnum]


  export const EmojiScalarFieldEnum: {
    id: 'id',
    studyId: 'studyId',
    emoNum: 'emoNum',
    count: 'count',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmojiScalarFieldEnum = (typeof EmojiScalarFieldEnum)[keyof typeof EmojiScalarFieldEnum]


  export const HabitScalarFieldEnum: {
    id: 'id',
    studyId: 'studyId',
    name: 'name',
    deleted: 'deleted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HabitScalarFieldEnum = (typeof HabitScalarFieldEnum)[keyof typeof HabitScalarFieldEnum]


  export const HabitSuccessDateScalarFieldEnum: {
    id: 'id',
    habitId: 'habitId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HabitSuccessDateScalarFieldEnum = (typeof HabitSuccessDateScalarFieldEnum)[keyof typeof HabitSuccessDateScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type StudyWhereInput = {
    AND?: StudyWhereInput | StudyWhereInput[]
    OR?: StudyWhereInput[]
    NOT?: StudyWhereInput | StudyWhereInput[]
    id?: StringFilter<"Study"> | string
    nickname?: StringFilter<"Study"> | string
    studyName?: StringFilter<"Study"> | string
    description?: StringFilter<"Study"> | string
    background?: StringFilter<"Study"> | string
    password?: StringFilter<"Study"> | string
    point?: IntFilter<"Study"> | number
    createdAt?: DateTimeFilter<"Study"> | Date | string
    updatedAt?: DateTimeFilter<"Study"> | Date | string
    Emojis?: EmojiListRelationFilter
    Habits?: HabitListRelationFilter
  }

  export type StudyOrderByWithRelationInput = {
    id?: SortOrder
    nickname?: SortOrder
    studyName?: SortOrder
    description?: SortOrder
    background?: SortOrder
    password?: SortOrder
    point?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Emojis?: EmojiOrderByRelationAggregateInput
    Habits?: HabitOrderByRelationAggregateInput
  }

  export type StudyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    nickname?: string
    AND?: StudyWhereInput | StudyWhereInput[]
    OR?: StudyWhereInput[]
    NOT?: StudyWhereInput | StudyWhereInput[]
    studyName?: StringFilter<"Study"> | string
    description?: StringFilter<"Study"> | string
    background?: StringFilter<"Study"> | string
    password?: StringFilter<"Study"> | string
    point?: IntFilter<"Study"> | number
    createdAt?: DateTimeFilter<"Study"> | Date | string
    updatedAt?: DateTimeFilter<"Study"> | Date | string
    Emojis?: EmojiListRelationFilter
    Habits?: HabitListRelationFilter
  }, "id" | "nickname">

  export type StudyOrderByWithAggregationInput = {
    id?: SortOrder
    nickname?: SortOrder
    studyName?: SortOrder
    description?: SortOrder
    background?: SortOrder
    password?: SortOrder
    point?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: StudyCountOrderByAggregateInput
    _avg?: StudyAvgOrderByAggregateInput
    _max?: StudyMaxOrderByAggregateInput
    _min?: StudyMinOrderByAggregateInput
    _sum?: StudySumOrderByAggregateInput
  }

  export type StudyScalarWhereWithAggregatesInput = {
    AND?: StudyScalarWhereWithAggregatesInput | StudyScalarWhereWithAggregatesInput[]
    OR?: StudyScalarWhereWithAggregatesInput[]
    NOT?: StudyScalarWhereWithAggregatesInput | StudyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Study"> | string
    nickname?: StringWithAggregatesFilter<"Study"> | string
    studyName?: StringWithAggregatesFilter<"Study"> | string
    description?: StringWithAggregatesFilter<"Study"> | string
    background?: StringWithAggregatesFilter<"Study"> | string
    password?: StringWithAggregatesFilter<"Study"> | string
    point?: IntWithAggregatesFilter<"Study"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Study"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Study"> | Date | string
  }

  export type EmojiWhereInput = {
    AND?: EmojiWhereInput | EmojiWhereInput[]
    OR?: EmojiWhereInput[]
    NOT?: EmojiWhereInput | EmojiWhereInput[]
    id?: StringFilter<"Emoji"> | string
    studyId?: StringFilter<"Emoji"> | string
    emoNum?: IntFilter<"Emoji"> | number
    count?: IntFilter<"Emoji"> | number
    createdAt?: DateTimeFilter<"Emoji"> | Date | string
    updatedAt?: DateTimeFilter<"Emoji"> | Date | string
    Study?: XOR<StudyRelationFilter, StudyWhereInput>
  }

  export type EmojiOrderByWithRelationInput = {
    id?: SortOrder
    studyId?: SortOrder
    emoNum?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Study?: StudyOrderByWithRelationInput
  }

  export type EmojiWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmojiWhereInput | EmojiWhereInput[]
    OR?: EmojiWhereInput[]
    NOT?: EmojiWhereInput | EmojiWhereInput[]
    studyId?: StringFilter<"Emoji"> | string
    emoNum?: IntFilter<"Emoji"> | number
    count?: IntFilter<"Emoji"> | number
    createdAt?: DateTimeFilter<"Emoji"> | Date | string
    updatedAt?: DateTimeFilter<"Emoji"> | Date | string
    Study?: XOR<StudyRelationFilter, StudyWhereInput>
  }, "id">

  export type EmojiOrderByWithAggregationInput = {
    id?: SortOrder
    studyId?: SortOrder
    emoNum?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmojiCountOrderByAggregateInput
    _avg?: EmojiAvgOrderByAggregateInput
    _max?: EmojiMaxOrderByAggregateInput
    _min?: EmojiMinOrderByAggregateInput
    _sum?: EmojiSumOrderByAggregateInput
  }

  export type EmojiScalarWhereWithAggregatesInput = {
    AND?: EmojiScalarWhereWithAggregatesInput | EmojiScalarWhereWithAggregatesInput[]
    OR?: EmojiScalarWhereWithAggregatesInput[]
    NOT?: EmojiScalarWhereWithAggregatesInput | EmojiScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Emoji"> | string
    studyId?: StringWithAggregatesFilter<"Emoji"> | string
    emoNum?: IntWithAggregatesFilter<"Emoji"> | number
    count?: IntWithAggregatesFilter<"Emoji"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Emoji"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Emoji"> | Date | string
  }

  export type HabitWhereInput = {
    AND?: HabitWhereInput | HabitWhereInput[]
    OR?: HabitWhereInput[]
    NOT?: HabitWhereInput | HabitWhereInput[]
    id?: StringFilter<"Habit"> | string
    studyId?: StringFilter<"Habit"> | string
    name?: StringFilter<"Habit"> | string
    deleted?: BoolFilter<"Habit"> | boolean
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
    Study?: XOR<StudyRelationFilter, StudyWhereInput>
    HabitSuccessDates?: HabitSuccessDateListRelationFilter
  }

  export type HabitOrderByWithRelationInput = {
    id?: SortOrder
    studyId?: SortOrder
    name?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Study?: StudyOrderByWithRelationInput
    HabitSuccessDates?: HabitSuccessDateOrderByRelationAggregateInput
  }

  export type HabitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HabitWhereInput | HabitWhereInput[]
    OR?: HabitWhereInput[]
    NOT?: HabitWhereInput | HabitWhereInput[]
    studyId?: StringFilter<"Habit"> | string
    name?: StringFilter<"Habit"> | string
    deleted?: BoolFilter<"Habit"> | boolean
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
    Study?: XOR<StudyRelationFilter, StudyWhereInput>
    HabitSuccessDates?: HabitSuccessDateListRelationFilter
  }, "id">

  export type HabitOrderByWithAggregationInput = {
    id?: SortOrder
    studyId?: SortOrder
    name?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HabitCountOrderByAggregateInput
    _max?: HabitMaxOrderByAggregateInput
    _min?: HabitMinOrderByAggregateInput
  }

  export type HabitScalarWhereWithAggregatesInput = {
    AND?: HabitScalarWhereWithAggregatesInput | HabitScalarWhereWithAggregatesInput[]
    OR?: HabitScalarWhereWithAggregatesInput[]
    NOT?: HabitScalarWhereWithAggregatesInput | HabitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Habit"> | string
    studyId?: StringWithAggregatesFilter<"Habit"> | string
    name?: StringWithAggregatesFilter<"Habit"> | string
    deleted?: BoolWithAggregatesFilter<"Habit"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Habit"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Habit"> | Date | string
  }

  export type HabitSuccessDateWhereInput = {
    AND?: HabitSuccessDateWhereInput | HabitSuccessDateWhereInput[]
    OR?: HabitSuccessDateWhereInput[]
    NOT?: HabitSuccessDateWhereInput | HabitSuccessDateWhereInput[]
    id?: StringFilter<"HabitSuccessDate"> | string
    habitId?: StringFilter<"HabitSuccessDate"> | string
    createdAt?: DateTimeFilter<"HabitSuccessDate"> | Date | string
    updatedAt?: DateTimeFilter<"HabitSuccessDate"> | Date | string
    Habit?: XOR<HabitRelationFilter, HabitWhereInput>
  }

  export type HabitSuccessDateOrderByWithRelationInput = {
    id?: SortOrder
    habitId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    Habit?: HabitOrderByWithRelationInput
  }

  export type HabitSuccessDateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HabitSuccessDateWhereInput | HabitSuccessDateWhereInput[]
    OR?: HabitSuccessDateWhereInput[]
    NOT?: HabitSuccessDateWhereInput | HabitSuccessDateWhereInput[]
    habitId?: StringFilter<"HabitSuccessDate"> | string
    createdAt?: DateTimeFilter<"HabitSuccessDate"> | Date | string
    updatedAt?: DateTimeFilter<"HabitSuccessDate"> | Date | string
    Habit?: XOR<HabitRelationFilter, HabitWhereInput>
  }, "id">

  export type HabitSuccessDateOrderByWithAggregationInput = {
    id?: SortOrder
    habitId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HabitSuccessDateCountOrderByAggregateInput
    _max?: HabitSuccessDateMaxOrderByAggregateInput
    _min?: HabitSuccessDateMinOrderByAggregateInput
  }

  export type HabitSuccessDateScalarWhereWithAggregatesInput = {
    AND?: HabitSuccessDateScalarWhereWithAggregatesInput | HabitSuccessDateScalarWhereWithAggregatesInput[]
    OR?: HabitSuccessDateScalarWhereWithAggregatesInput[]
    NOT?: HabitSuccessDateScalarWhereWithAggregatesInput | HabitSuccessDateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HabitSuccessDate"> | string
    habitId?: StringWithAggregatesFilter<"HabitSuccessDate"> | string
    createdAt?: DateTimeWithAggregatesFilter<"HabitSuccessDate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HabitSuccessDate"> | Date | string
  }

  export type StudyCreateInput = {
    id?: string
    nickname: string
    studyName: string
    description?: string
    background: string
    password: string
    point?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Emojis?: EmojiCreateNestedManyWithoutStudyInput
    Habits?: HabitCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateInput = {
    id?: string
    nickname: string
    studyName: string
    description?: string
    background: string
    password: string
    point?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Emojis?: EmojiUncheckedCreateNestedManyWithoutStudyInput
    Habits?: HabitUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Emojis?: EmojiUpdateManyWithoutStudyNestedInput
    Habits?: HabitUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Emojis?: EmojiUncheckedUpdateManyWithoutStudyNestedInput
    Habits?: HabitUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type StudyCreateManyInput = {
    id?: string
    nickname: string
    studyName: string
    description?: string
    background: string
    password: string
    point?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type StudyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmojiCreateInput = {
    id?: string
    emoNum: number
    count?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Study: StudyCreateNestedOneWithoutEmojisInput
  }

  export type EmojiUncheckedCreateInput = {
    id?: string
    studyId: string
    emoNum: number
    count?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmojiUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoNum?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Study?: StudyUpdateOneRequiredWithoutEmojisNestedInput
  }

  export type EmojiUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    emoNum?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmojiCreateManyInput = {
    id?: string
    studyId: string
    emoNum: number
    count?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmojiUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoNum?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmojiUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    emoNum?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitCreateInput = {
    id?: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Study: StudyCreateNestedOneWithoutHabitsInput
    HabitSuccessDates?: HabitSuccessDateCreateNestedManyWithoutHabitInput
  }

  export type HabitUncheckedCreateInput = {
    id?: string
    studyId: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    HabitSuccessDates?: HabitSuccessDateUncheckedCreateNestedManyWithoutHabitInput
  }

  export type HabitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Study?: StudyUpdateOneRequiredWithoutHabitsNestedInput
    HabitSuccessDates?: HabitSuccessDateUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    HabitSuccessDates?: HabitSuccessDateUncheckedUpdateManyWithoutHabitNestedInput
  }

  export type HabitCreateManyInput = {
    id?: string
    studyId: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitSuccessDateCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    Habit: HabitCreateNestedOneWithoutHabitSuccessDatesInput
  }

  export type HabitSuccessDateUncheckedCreateInput = {
    id?: string
    habitId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitSuccessDateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Habit?: HabitUpdateOneRequiredWithoutHabitSuccessDatesNestedInput
  }

  export type HabitSuccessDateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitSuccessDateCreateManyInput = {
    id?: string
    habitId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitSuccessDateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitSuccessDateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    habitId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EmojiListRelationFilter = {
    every?: EmojiWhereInput
    some?: EmojiWhereInput
    none?: EmojiWhereInput
  }

  export type HabitListRelationFilter = {
    every?: HabitWhereInput
    some?: HabitWhereInput
    none?: HabitWhereInput
  }

  export type EmojiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HabitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudyCountOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    studyName?: SortOrder
    description?: SortOrder
    background?: SortOrder
    password?: SortOrder
    point?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudyAvgOrderByAggregateInput = {
    point?: SortOrder
  }

  export type StudyMaxOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    studyName?: SortOrder
    description?: SortOrder
    background?: SortOrder
    password?: SortOrder
    point?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudyMinOrderByAggregateInput = {
    id?: SortOrder
    nickname?: SortOrder
    studyName?: SortOrder
    description?: SortOrder
    background?: SortOrder
    password?: SortOrder
    point?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StudySumOrderByAggregateInput = {
    point?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StudyRelationFilter = {
    is?: StudyWhereInput
    isNot?: StudyWhereInput
  }

  export type EmojiCountOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    emoNum?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmojiAvgOrderByAggregateInput = {
    emoNum?: SortOrder
    count?: SortOrder
  }

  export type EmojiMaxOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    emoNum?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmojiMinOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    emoNum?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmojiSumOrderByAggregateInput = {
    emoNum?: SortOrder
    count?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type HabitSuccessDateListRelationFilter = {
    every?: HabitSuccessDateWhereInput
    some?: HabitSuccessDateWhereInput
    none?: HabitSuccessDateWhereInput
  }

  export type HabitSuccessDateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HabitCountOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    name?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitMaxOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    name?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitMinOrderByAggregateInput = {
    id?: SortOrder
    studyId?: SortOrder
    name?: SortOrder
    deleted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type HabitRelationFilter = {
    is?: HabitWhereInput
    isNot?: HabitWhereInput
  }

  export type HabitSuccessDateCountOrderByAggregateInput = {
    id?: SortOrder
    habitId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitSuccessDateMaxOrderByAggregateInput = {
    id?: SortOrder
    habitId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HabitSuccessDateMinOrderByAggregateInput = {
    id?: SortOrder
    habitId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmojiCreateNestedManyWithoutStudyInput = {
    create?: XOR<EmojiCreateWithoutStudyInput, EmojiUncheckedCreateWithoutStudyInput> | EmojiCreateWithoutStudyInput[] | EmojiUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: EmojiCreateOrConnectWithoutStudyInput | EmojiCreateOrConnectWithoutStudyInput[]
    createMany?: EmojiCreateManyStudyInputEnvelope
    connect?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
  }

  export type HabitCreateNestedManyWithoutStudyInput = {
    create?: XOR<HabitCreateWithoutStudyInput, HabitUncheckedCreateWithoutStudyInput> | HabitCreateWithoutStudyInput[] | HabitUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutStudyInput | HabitCreateOrConnectWithoutStudyInput[]
    createMany?: HabitCreateManyStudyInputEnvelope
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
  }

  export type EmojiUncheckedCreateNestedManyWithoutStudyInput = {
    create?: XOR<EmojiCreateWithoutStudyInput, EmojiUncheckedCreateWithoutStudyInput> | EmojiCreateWithoutStudyInput[] | EmojiUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: EmojiCreateOrConnectWithoutStudyInput | EmojiCreateOrConnectWithoutStudyInput[]
    createMany?: EmojiCreateManyStudyInputEnvelope
    connect?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
  }

  export type HabitUncheckedCreateNestedManyWithoutStudyInput = {
    create?: XOR<HabitCreateWithoutStudyInput, HabitUncheckedCreateWithoutStudyInput> | HabitCreateWithoutStudyInput[] | HabitUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutStudyInput | HabitCreateOrConnectWithoutStudyInput[]
    createMany?: HabitCreateManyStudyInputEnvelope
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EmojiUpdateManyWithoutStudyNestedInput = {
    create?: XOR<EmojiCreateWithoutStudyInput, EmojiUncheckedCreateWithoutStudyInput> | EmojiCreateWithoutStudyInput[] | EmojiUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: EmojiCreateOrConnectWithoutStudyInput | EmojiCreateOrConnectWithoutStudyInput[]
    upsert?: EmojiUpsertWithWhereUniqueWithoutStudyInput | EmojiUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: EmojiCreateManyStudyInputEnvelope
    set?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    disconnect?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    delete?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    connect?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    update?: EmojiUpdateWithWhereUniqueWithoutStudyInput | EmojiUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: EmojiUpdateManyWithWhereWithoutStudyInput | EmojiUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: EmojiScalarWhereInput | EmojiScalarWhereInput[]
  }

  export type HabitUpdateManyWithoutStudyNestedInput = {
    create?: XOR<HabitCreateWithoutStudyInput, HabitUncheckedCreateWithoutStudyInput> | HabitCreateWithoutStudyInput[] | HabitUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutStudyInput | HabitCreateOrConnectWithoutStudyInput[]
    upsert?: HabitUpsertWithWhereUniqueWithoutStudyInput | HabitUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: HabitCreateManyStudyInputEnvelope
    set?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    disconnect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    delete?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    update?: HabitUpdateWithWhereUniqueWithoutStudyInput | HabitUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: HabitUpdateManyWithWhereWithoutStudyInput | HabitUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: HabitScalarWhereInput | HabitScalarWhereInput[]
  }

  export type EmojiUncheckedUpdateManyWithoutStudyNestedInput = {
    create?: XOR<EmojiCreateWithoutStudyInput, EmojiUncheckedCreateWithoutStudyInput> | EmojiCreateWithoutStudyInput[] | EmojiUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: EmojiCreateOrConnectWithoutStudyInput | EmojiCreateOrConnectWithoutStudyInput[]
    upsert?: EmojiUpsertWithWhereUniqueWithoutStudyInput | EmojiUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: EmojiCreateManyStudyInputEnvelope
    set?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    disconnect?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    delete?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    connect?: EmojiWhereUniqueInput | EmojiWhereUniqueInput[]
    update?: EmojiUpdateWithWhereUniqueWithoutStudyInput | EmojiUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: EmojiUpdateManyWithWhereWithoutStudyInput | EmojiUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: EmojiScalarWhereInput | EmojiScalarWhereInput[]
  }

  export type HabitUncheckedUpdateManyWithoutStudyNestedInput = {
    create?: XOR<HabitCreateWithoutStudyInput, HabitUncheckedCreateWithoutStudyInput> | HabitCreateWithoutStudyInput[] | HabitUncheckedCreateWithoutStudyInput[]
    connectOrCreate?: HabitCreateOrConnectWithoutStudyInput | HabitCreateOrConnectWithoutStudyInput[]
    upsert?: HabitUpsertWithWhereUniqueWithoutStudyInput | HabitUpsertWithWhereUniqueWithoutStudyInput[]
    createMany?: HabitCreateManyStudyInputEnvelope
    set?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    disconnect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    delete?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    connect?: HabitWhereUniqueInput | HabitWhereUniqueInput[]
    update?: HabitUpdateWithWhereUniqueWithoutStudyInput | HabitUpdateWithWhereUniqueWithoutStudyInput[]
    updateMany?: HabitUpdateManyWithWhereWithoutStudyInput | HabitUpdateManyWithWhereWithoutStudyInput[]
    deleteMany?: HabitScalarWhereInput | HabitScalarWhereInput[]
  }

  export type StudyCreateNestedOneWithoutEmojisInput = {
    create?: XOR<StudyCreateWithoutEmojisInput, StudyUncheckedCreateWithoutEmojisInput>
    connectOrCreate?: StudyCreateOrConnectWithoutEmojisInput
    connect?: StudyWhereUniqueInput
  }

  export type StudyUpdateOneRequiredWithoutEmojisNestedInput = {
    create?: XOR<StudyCreateWithoutEmojisInput, StudyUncheckedCreateWithoutEmojisInput>
    connectOrCreate?: StudyCreateOrConnectWithoutEmojisInput
    upsert?: StudyUpsertWithoutEmojisInput
    connect?: StudyWhereUniqueInput
    update?: XOR<XOR<StudyUpdateToOneWithWhereWithoutEmojisInput, StudyUpdateWithoutEmojisInput>, StudyUncheckedUpdateWithoutEmojisInput>
  }

  export type StudyCreateNestedOneWithoutHabitsInput = {
    create?: XOR<StudyCreateWithoutHabitsInput, StudyUncheckedCreateWithoutHabitsInput>
    connectOrCreate?: StudyCreateOrConnectWithoutHabitsInput
    connect?: StudyWhereUniqueInput
  }

  export type HabitSuccessDateCreateNestedManyWithoutHabitInput = {
    create?: XOR<HabitSuccessDateCreateWithoutHabitInput, HabitSuccessDateUncheckedCreateWithoutHabitInput> | HabitSuccessDateCreateWithoutHabitInput[] | HabitSuccessDateUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: HabitSuccessDateCreateOrConnectWithoutHabitInput | HabitSuccessDateCreateOrConnectWithoutHabitInput[]
    createMany?: HabitSuccessDateCreateManyHabitInputEnvelope
    connect?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
  }

  export type HabitSuccessDateUncheckedCreateNestedManyWithoutHabitInput = {
    create?: XOR<HabitSuccessDateCreateWithoutHabitInput, HabitSuccessDateUncheckedCreateWithoutHabitInput> | HabitSuccessDateCreateWithoutHabitInput[] | HabitSuccessDateUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: HabitSuccessDateCreateOrConnectWithoutHabitInput | HabitSuccessDateCreateOrConnectWithoutHabitInput[]
    createMany?: HabitSuccessDateCreateManyHabitInputEnvelope
    connect?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type StudyUpdateOneRequiredWithoutHabitsNestedInput = {
    create?: XOR<StudyCreateWithoutHabitsInput, StudyUncheckedCreateWithoutHabitsInput>
    connectOrCreate?: StudyCreateOrConnectWithoutHabitsInput
    upsert?: StudyUpsertWithoutHabitsInput
    connect?: StudyWhereUniqueInput
    update?: XOR<XOR<StudyUpdateToOneWithWhereWithoutHabitsInput, StudyUpdateWithoutHabitsInput>, StudyUncheckedUpdateWithoutHabitsInput>
  }

  export type HabitSuccessDateUpdateManyWithoutHabitNestedInput = {
    create?: XOR<HabitSuccessDateCreateWithoutHabitInput, HabitSuccessDateUncheckedCreateWithoutHabitInput> | HabitSuccessDateCreateWithoutHabitInput[] | HabitSuccessDateUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: HabitSuccessDateCreateOrConnectWithoutHabitInput | HabitSuccessDateCreateOrConnectWithoutHabitInput[]
    upsert?: HabitSuccessDateUpsertWithWhereUniqueWithoutHabitInput | HabitSuccessDateUpsertWithWhereUniqueWithoutHabitInput[]
    createMany?: HabitSuccessDateCreateManyHabitInputEnvelope
    set?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    disconnect?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    delete?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    connect?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    update?: HabitSuccessDateUpdateWithWhereUniqueWithoutHabitInput | HabitSuccessDateUpdateWithWhereUniqueWithoutHabitInput[]
    updateMany?: HabitSuccessDateUpdateManyWithWhereWithoutHabitInput | HabitSuccessDateUpdateManyWithWhereWithoutHabitInput[]
    deleteMany?: HabitSuccessDateScalarWhereInput | HabitSuccessDateScalarWhereInput[]
  }

  export type HabitSuccessDateUncheckedUpdateManyWithoutHabitNestedInput = {
    create?: XOR<HabitSuccessDateCreateWithoutHabitInput, HabitSuccessDateUncheckedCreateWithoutHabitInput> | HabitSuccessDateCreateWithoutHabitInput[] | HabitSuccessDateUncheckedCreateWithoutHabitInput[]
    connectOrCreate?: HabitSuccessDateCreateOrConnectWithoutHabitInput | HabitSuccessDateCreateOrConnectWithoutHabitInput[]
    upsert?: HabitSuccessDateUpsertWithWhereUniqueWithoutHabitInput | HabitSuccessDateUpsertWithWhereUniqueWithoutHabitInput[]
    createMany?: HabitSuccessDateCreateManyHabitInputEnvelope
    set?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    disconnect?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    delete?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    connect?: HabitSuccessDateWhereUniqueInput | HabitSuccessDateWhereUniqueInput[]
    update?: HabitSuccessDateUpdateWithWhereUniqueWithoutHabitInput | HabitSuccessDateUpdateWithWhereUniqueWithoutHabitInput[]
    updateMany?: HabitSuccessDateUpdateManyWithWhereWithoutHabitInput | HabitSuccessDateUpdateManyWithWhereWithoutHabitInput[]
    deleteMany?: HabitSuccessDateScalarWhereInput | HabitSuccessDateScalarWhereInput[]
  }

  export type HabitCreateNestedOneWithoutHabitSuccessDatesInput = {
    create?: XOR<HabitCreateWithoutHabitSuccessDatesInput, HabitUncheckedCreateWithoutHabitSuccessDatesInput>
    connectOrCreate?: HabitCreateOrConnectWithoutHabitSuccessDatesInput
    connect?: HabitWhereUniqueInput
  }

  export type HabitUpdateOneRequiredWithoutHabitSuccessDatesNestedInput = {
    create?: XOR<HabitCreateWithoutHabitSuccessDatesInput, HabitUncheckedCreateWithoutHabitSuccessDatesInput>
    connectOrCreate?: HabitCreateOrConnectWithoutHabitSuccessDatesInput
    upsert?: HabitUpsertWithoutHabitSuccessDatesInput
    connect?: HabitWhereUniqueInput
    update?: XOR<XOR<HabitUpdateToOneWithWhereWithoutHabitSuccessDatesInput, HabitUpdateWithoutHabitSuccessDatesInput>, HabitUncheckedUpdateWithoutHabitSuccessDatesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EmojiCreateWithoutStudyInput = {
    id?: string
    emoNum: number
    count?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmojiUncheckedCreateWithoutStudyInput = {
    id?: string
    emoNum: number
    count?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmojiCreateOrConnectWithoutStudyInput = {
    where: EmojiWhereUniqueInput
    create: XOR<EmojiCreateWithoutStudyInput, EmojiUncheckedCreateWithoutStudyInput>
  }

  export type EmojiCreateManyStudyInputEnvelope = {
    data: EmojiCreateManyStudyInput | EmojiCreateManyStudyInput[]
    skipDuplicates?: boolean
  }

  export type HabitCreateWithoutStudyInput = {
    id?: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    HabitSuccessDates?: HabitSuccessDateCreateNestedManyWithoutHabitInput
  }

  export type HabitUncheckedCreateWithoutStudyInput = {
    id?: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    HabitSuccessDates?: HabitSuccessDateUncheckedCreateNestedManyWithoutHabitInput
  }

  export type HabitCreateOrConnectWithoutStudyInput = {
    where: HabitWhereUniqueInput
    create: XOR<HabitCreateWithoutStudyInput, HabitUncheckedCreateWithoutStudyInput>
  }

  export type HabitCreateManyStudyInputEnvelope = {
    data: HabitCreateManyStudyInput | HabitCreateManyStudyInput[]
    skipDuplicates?: boolean
  }

  export type EmojiUpsertWithWhereUniqueWithoutStudyInput = {
    where: EmojiWhereUniqueInput
    update: XOR<EmojiUpdateWithoutStudyInput, EmojiUncheckedUpdateWithoutStudyInput>
    create: XOR<EmojiCreateWithoutStudyInput, EmojiUncheckedCreateWithoutStudyInput>
  }

  export type EmojiUpdateWithWhereUniqueWithoutStudyInput = {
    where: EmojiWhereUniqueInput
    data: XOR<EmojiUpdateWithoutStudyInput, EmojiUncheckedUpdateWithoutStudyInput>
  }

  export type EmojiUpdateManyWithWhereWithoutStudyInput = {
    where: EmojiScalarWhereInput
    data: XOR<EmojiUpdateManyMutationInput, EmojiUncheckedUpdateManyWithoutStudyInput>
  }

  export type EmojiScalarWhereInput = {
    AND?: EmojiScalarWhereInput | EmojiScalarWhereInput[]
    OR?: EmojiScalarWhereInput[]
    NOT?: EmojiScalarWhereInput | EmojiScalarWhereInput[]
    id?: StringFilter<"Emoji"> | string
    studyId?: StringFilter<"Emoji"> | string
    emoNum?: IntFilter<"Emoji"> | number
    count?: IntFilter<"Emoji"> | number
    createdAt?: DateTimeFilter<"Emoji"> | Date | string
    updatedAt?: DateTimeFilter<"Emoji"> | Date | string
  }

  export type HabitUpsertWithWhereUniqueWithoutStudyInput = {
    where: HabitWhereUniqueInput
    update: XOR<HabitUpdateWithoutStudyInput, HabitUncheckedUpdateWithoutStudyInput>
    create: XOR<HabitCreateWithoutStudyInput, HabitUncheckedCreateWithoutStudyInput>
  }

  export type HabitUpdateWithWhereUniqueWithoutStudyInput = {
    where: HabitWhereUniqueInput
    data: XOR<HabitUpdateWithoutStudyInput, HabitUncheckedUpdateWithoutStudyInput>
  }

  export type HabitUpdateManyWithWhereWithoutStudyInput = {
    where: HabitScalarWhereInput
    data: XOR<HabitUpdateManyMutationInput, HabitUncheckedUpdateManyWithoutStudyInput>
  }

  export type HabitScalarWhereInput = {
    AND?: HabitScalarWhereInput | HabitScalarWhereInput[]
    OR?: HabitScalarWhereInput[]
    NOT?: HabitScalarWhereInput | HabitScalarWhereInput[]
    id?: StringFilter<"Habit"> | string
    studyId?: StringFilter<"Habit"> | string
    name?: StringFilter<"Habit"> | string
    deleted?: BoolFilter<"Habit"> | boolean
    createdAt?: DateTimeFilter<"Habit"> | Date | string
    updatedAt?: DateTimeFilter<"Habit"> | Date | string
  }

  export type StudyCreateWithoutEmojisInput = {
    id?: string
    nickname: string
    studyName: string
    description?: string
    background: string
    password: string
    point?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Habits?: HabitCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutEmojisInput = {
    id?: string
    nickname: string
    studyName: string
    description?: string
    background: string
    password: string
    point?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Habits?: HabitUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutEmojisInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutEmojisInput, StudyUncheckedCreateWithoutEmojisInput>
  }

  export type StudyUpsertWithoutEmojisInput = {
    update: XOR<StudyUpdateWithoutEmojisInput, StudyUncheckedUpdateWithoutEmojisInput>
    create: XOR<StudyCreateWithoutEmojisInput, StudyUncheckedCreateWithoutEmojisInput>
    where?: StudyWhereInput
  }

  export type StudyUpdateToOneWithWhereWithoutEmojisInput = {
    where?: StudyWhereInput
    data: XOR<StudyUpdateWithoutEmojisInput, StudyUncheckedUpdateWithoutEmojisInput>
  }

  export type StudyUpdateWithoutEmojisInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Habits?: HabitUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutEmojisInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Habits?: HabitUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type StudyCreateWithoutHabitsInput = {
    id?: string
    nickname: string
    studyName: string
    description?: string
    background: string
    password: string
    point?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Emojis?: EmojiCreateNestedManyWithoutStudyInput
  }

  export type StudyUncheckedCreateWithoutHabitsInput = {
    id?: string
    nickname: string
    studyName: string
    description?: string
    background: string
    password: string
    point?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    Emojis?: EmojiUncheckedCreateNestedManyWithoutStudyInput
  }

  export type StudyCreateOrConnectWithoutHabitsInput = {
    where: StudyWhereUniqueInput
    create: XOR<StudyCreateWithoutHabitsInput, StudyUncheckedCreateWithoutHabitsInput>
  }

  export type HabitSuccessDateCreateWithoutHabitInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitSuccessDateUncheckedCreateWithoutHabitInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitSuccessDateCreateOrConnectWithoutHabitInput = {
    where: HabitSuccessDateWhereUniqueInput
    create: XOR<HabitSuccessDateCreateWithoutHabitInput, HabitSuccessDateUncheckedCreateWithoutHabitInput>
  }

  export type HabitSuccessDateCreateManyHabitInputEnvelope = {
    data: HabitSuccessDateCreateManyHabitInput | HabitSuccessDateCreateManyHabitInput[]
    skipDuplicates?: boolean
  }

  export type StudyUpsertWithoutHabitsInput = {
    update: XOR<StudyUpdateWithoutHabitsInput, StudyUncheckedUpdateWithoutHabitsInput>
    create: XOR<StudyCreateWithoutHabitsInput, StudyUncheckedCreateWithoutHabitsInput>
    where?: StudyWhereInput
  }

  export type StudyUpdateToOneWithWhereWithoutHabitsInput = {
    where?: StudyWhereInput
    data: XOR<StudyUpdateWithoutHabitsInput, StudyUncheckedUpdateWithoutHabitsInput>
  }

  export type StudyUpdateWithoutHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Emojis?: EmojiUpdateManyWithoutStudyNestedInput
  }

  export type StudyUncheckedUpdateWithoutHabitsInput = {
    id?: StringFieldUpdateOperationsInput | string
    nickname?: StringFieldUpdateOperationsInput | string
    studyName?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    background?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    point?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Emojis?: EmojiUncheckedUpdateManyWithoutStudyNestedInput
  }

  export type HabitSuccessDateUpsertWithWhereUniqueWithoutHabitInput = {
    where: HabitSuccessDateWhereUniqueInput
    update: XOR<HabitSuccessDateUpdateWithoutHabitInput, HabitSuccessDateUncheckedUpdateWithoutHabitInput>
    create: XOR<HabitSuccessDateCreateWithoutHabitInput, HabitSuccessDateUncheckedCreateWithoutHabitInput>
  }

  export type HabitSuccessDateUpdateWithWhereUniqueWithoutHabitInput = {
    where: HabitSuccessDateWhereUniqueInput
    data: XOR<HabitSuccessDateUpdateWithoutHabitInput, HabitSuccessDateUncheckedUpdateWithoutHabitInput>
  }

  export type HabitSuccessDateUpdateManyWithWhereWithoutHabitInput = {
    where: HabitSuccessDateScalarWhereInput
    data: XOR<HabitSuccessDateUpdateManyMutationInput, HabitSuccessDateUncheckedUpdateManyWithoutHabitInput>
  }

  export type HabitSuccessDateScalarWhereInput = {
    AND?: HabitSuccessDateScalarWhereInput | HabitSuccessDateScalarWhereInput[]
    OR?: HabitSuccessDateScalarWhereInput[]
    NOT?: HabitSuccessDateScalarWhereInput | HabitSuccessDateScalarWhereInput[]
    id?: StringFilter<"HabitSuccessDate"> | string
    habitId?: StringFilter<"HabitSuccessDate"> | string
    createdAt?: DateTimeFilter<"HabitSuccessDate"> | Date | string
    updatedAt?: DateTimeFilter<"HabitSuccessDate"> | Date | string
  }

  export type HabitCreateWithoutHabitSuccessDatesInput = {
    id?: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    Study: StudyCreateNestedOneWithoutHabitsInput
  }

  export type HabitUncheckedCreateWithoutHabitSuccessDatesInput = {
    id?: string
    studyId: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitCreateOrConnectWithoutHabitSuccessDatesInput = {
    where: HabitWhereUniqueInput
    create: XOR<HabitCreateWithoutHabitSuccessDatesInput, HabitUncheckedCreateWithoutHabitSuccessDatesInput>
  }

  export type HabitUpsertWithoutHabitSuccessDatesInput = {
    update: XOR<HabitUpdateWithoutHabitSuccessDatesInput, HabitUncheckedUpdateWithoutHabitSuccessDatesInput>
    create: XOR<HabitCreateWithoutHabitSuccessDatesInput, HabitUncheckedCreateWithoutHabitSuccessDatesInput>
    where?: HabitWhereInput
  }

  export type HabitUpdateToOneWithWhereWithoutHabitSuccessDatesInput = {
    where?: HabitWhereInput
    data: XOR<HabitUpdateWithoutHabitSuccessDatesInput, HabitUncheckedUpdateWithoutHabitSuccessDatesInput>
  }

  export type HabitUpdateWithoutHabitSuccessDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Study?: StudyUpdateOneRequiredWithoutHabitsNestedInput
  }

  export type HabitUncheckedUpdateWithoutHabitSuccessDatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    studyId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmojiCreateManyStudyInput = {
    id?: string
    emoNum: number
    count?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitCreateManyStudyInput = {
    id?: string
    name: string
    deleted?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmojiUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoNum?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmojiUncheckedUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoNum?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmojiUncheckedUpdateManyWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    emoNum?: IntFieldUpdateOperationsInput | number
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    HabitSuccessDates?: HabitSuccessDateUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    HabitSuccessDates?: HabitSuccessDateUncheckedUpdateManyWithoutHabitNestedInput
  }

  export type HabitUncheckedUpdateManyWithoutStudyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitSuccessDateCreateManyHabitInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HabitSuccessDateUpdateWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitSuccessDateUncheckedUpdateWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HabitSuccessDateUncheckedUpdateManyWithoutHabitInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StudyCountOutputTypeDefaultArgs instead
     */
    export type StudyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HabitCountOutputTypeDefaultArgs instead
     */
    export type HabitCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HabitCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudyDefaultArgs instead
     */
    export type StudyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmojiDefaultArgs instead
     */
    export type EmojiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmojiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HabitDefaultArgs instead
     */
    export type HabitArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HabitDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HabitSuccessDateDefaultArgs instead
     */
    export type HabitSuccessDateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HabitSuccessDateDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}