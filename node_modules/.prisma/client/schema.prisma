// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Study {
  id          String   @id @default(uuid())
  nickname    String   @unique @db.VarChar(12)
  studyName   String   @map("study_name") @db.VarChar(20)
  description String   @default("") @db.VarChar(100)
  background  String   @db.VarChar(50)
  password    String   @db.VarChar(24)
  point       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Emojis      Emoji[]
  Habits      Habit[]
}

model Emoji {
  id        String   @id @default(uuid())
  Study     Study    @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId   String   @map("study_id")
  emoNum    Int
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Habit {
  id                String             @id @default(uuid())
  Study             Study              @relation(fields: [studyId], references: [id], onDelete: Cascade)
  studyId           String             @map("study_id")
  name              String             @db.VarChar(30)
  deleted           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  HabitSuccessDates HabitSuccessDate[]
}

model HabitSuccessDate {
  id        String   @id @default(uuid())
  Habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)
  habitId   String   @map("habit_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Habit_Success_Date")
}
